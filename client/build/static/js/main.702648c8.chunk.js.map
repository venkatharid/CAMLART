{"version":3,"sources":["components/Cards/Cards.module.css","App.module.css","components/CountryPicker/CountryPicker.module.css","components/Chart/Chart.module.css","components/Spinner/Spinner.js","components/Cards/Cards.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","api/index.js","constants.js","components/Map/MapChart.js","components/Map/Map.js","components/AppBarWithSideBar.js","components/Layout.js","App.js","index.js","components/Map/Map.module.css"],"names":["module","exports","Spinner","className","Cards","countryData","predictedDataForCntry","styles","container","Typography","heading","variant","gutterBottom","component","location","Grid","spacing","justify","item","Card","xs","md","cx","card","infected","CardContent","color","style","width","total_cases","start","end","separator","duration","length","xgb_Prediction_cc","Date","recovered","total_vaccinations","xgb_Prediction_vc","deaths","total_deaths","xgb_Prediction_Deaths","lastupdate","last_updated_date","moment","format","Chart","countryDataByDates","useState","isBarChart","setBarChart","barChart","data","labels","datasets","toFixed","label","backgroundColor","options","legend","display","title","text","lineChart","row","map","i","date","borderColor","fill","msg","marginBottom","Button","btn","onClick","CountryPicker","countriesData","handleCountryChange","FormControl","formControl","NativeSelect","defaultValue","onChange","event","target","value","country","index","key","fetchData","a","axios","get","covidData","hasOwnProperty","push","console","log","fetchDataByDates","covidDataByDates","fetchPredictedData","cntryName","article","post","MAP_META","World","name","geoDataFile","memo","setTooltipVisibility","geoUrl","data-tip","projectionConfig","scale","zoom","geography","geographies","geo","rsmKey","onMouseEnter","properties","NAME","ISO_A2","toLowerCase","onMouseLeave","default","outline","stroke","strokeOpacity","hover","pressed","Map","_globalData","setCountryData","countryIsoCode","countryName","cntryDataNotAvailable","countryDataForMap","setCountryDataForMap","showToolTip","setshowToolTip","globalData","countryCode","filter","mapcontainer","tooltipcontainer","image","src","alt","Intl","NumberFormat","new_cases","useStyle","makeStyles","theme","drawer","breakpoints","up","drawerPaper","active","background","toolbardummy","mixins","toolbar","description","flexGrow","Main","styled","shouldForwardProp","prop","open","padding","transition","transitions","create","easing","sharp","leavingScreen","marginLeft","easeOut","enteringScreen","AppBar","MuiAppBar","DrawerHeader","alignItems","justifyContent","menuItems","icon","SubjectOutlined","path","AppBarWithSideBar","classes","history","useHistory","useLocation","useTheme","React","setOpen","Box","CssBaseline","position","appbar","elevation","Toolbar","IconButton","aria-label","edge","mr","noWrap","Drawer","flexShrink","boxSizing","anchor","paper","direction","Divider","List","ListItem","button","pathname","ListItemIcon","ListItemText","primary","page","root","withRouter","children","createTheme","palette","main","App","state","covidGlobalDataByDates","setState","findPredictedDataForCntry","predictedData","fetchedData","this","globaldataByDates","ThemeProvider","exact","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.702648c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__VvtPA\",\"card\":\"Cards_card__IQyH1\",\"infected\":\"Cards_infected__OqXAQ\",\"recovered\":\"Cards_recovered__3aWPK\",\"deaths\":\"Cards_deaths__2pBBH\",\"active\":\"Cards_active__3oTeL\",\"lastupdate\":\"Cards_lastupdate__1LUG1\",\"heading\":\"Cards_heading__3idSV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__XMG2Y\",\"image\":\"App_image__Rh1im\",\"wrapper\":\"App_wrapper__246J-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1hPka\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__32rxY\",\"Bar\":\"Chart_Bar__3WnQi\",\"btn\":\"Chart_btn__2OZn3\",\"marginBottom\":\"Chart_marginBottom__10y4I\",\"row\":\"Chart_row__3Bykv\",\"msg\":\"Chart_msg__9SD85\"};","import React from 'react'\r\n\r\nconst Spinner = () => {\r\n    return (<i className=\"fas fa-spinner fa-spin fa-fw\"></i>)\r\n}\r\n\r\nexport default Spinner;","import React from 'react'\r\nimport moment from 'moment'\r\nimport Spinner from '../Spinner/Spinner';\r\nimport { Card, CardContent, Typography, Grid, makeStyles } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';   // this is to apply two or more classes to div\r\n\r\n\r\nconst Cards = ({ countryData, predictedDataForCntry }) => {\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n\r\n            <Typography className={styles.heading} variant='subtitle2' gutterBottom component=\"div\">\r\n                Current status of {countryData[0]?.location ? countryData[0]?.location : '###'}\r\n            </Typography>\r\n\r\n            <Grid container spacing={2} justify='center'>\r\n                <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>\r\n                            <i style={{ color: \"rgba(0,0,255,0.5)\", width: '25px' }} className=\"fas fa-clinic-medical\"></i> {' '}Total Cases\r\n                        </Typography>\r\n\r\n                        <Typography variant='h5' gutterBottom style={{ width: 'auto' }}>\r\n                            {countryData && countryData[0]?.total_cases >= 0 ?\r\n                                <CountUp\r\n                                    start={0}\r\n                                    end={countryData[0].total_cases ? countryData[0].total_cases : 0}\r\n                                    separator=','\r\n                                    duration={2.1}  // seconds\r\n                                /> : <Spinner />}\r\n                        </Typography>\r\n\r\n                        <Typography variant='body2' gutterBottom>\r\n                            Total number of cases of COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>\r\n                            <i style={{ color: \"rgba(0,0,255,0.5)\", width: '25px' }} className=\"fas fa-clinic-medical\"></i> {' '}Predicted Total Cases\r\n                        </Typography>\r\n\r\n                        <Typography variant='h5' gutterBottom style={{ width: 'auto' }}>\r\n                            {countryData && countryData[0]?.total_cases >= 0 ?\r\n                                <CountUp\r\n                                    start={0}\r\n                                    end={predictedDataForCntry.length === 0 ? 0 : predictedDataForCntry[predictedDataForCntry.length - 1].xgb_Prediction_cc ? predictedDataForCntry[predictedDataForCntry.length - 1].xgb_Prediction_cc : 0}\r\n                                    separator=','\r\n                                    duration={2.1}  // seconds\r\n                                /> : <Spinner />}\r\n                        </Typography>\r\n\r\n                        <Typography variant='body2' gutterBottom>\r\n                            Predicted Total number of cases of COVID-19 {predictedDataForCntry.length === 0 ? '0/0/0' : predictedDataForCntry[predictedDataForCntry.length - 1].Date}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>\r\n                            <i style={{ color: \"rgba(0,255,0,0.5)\", width: '25px' }} className=\"fas fa-hospital-user\"></i>{' '}Vaccinations\r\n                        </Typography>\r\n\r\n                        <Typography variant='h5' gutterBottom>\r\n                            {countryData && countryData[0]?.total_vaccinations >= 0 ?\r\n                                <CountUp\r\n                                    start={0}\r\n                                    end={countryData[0].total_vaccinations ? countryData[0].total_vaccinations : 0}\r\n                                    separator=','\r\n                                    duration={2.1}  // seconds\r\n                                /> : <Spinner />}\r\n                        </Typography>\r\n\r\n                        <Typography variant='body2' gutterBottom>\r\n                            Number of vaccinations of COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>\r\n                            <i style={{ color: \"rgba(0,255,0,0.5)\", width: '25px' }} className=\"fas fa-hospital-user\"></i>{' '}Predicted Vaccinations\r\n                        </Typography>\r\n\r\n                        <Typography variant='h5' gutterBottom>\r\n                            {countryData && countryData[0]?.total_vaccinations >= 0 ?\r\n                                <CountUp\r\n                                    start={0}\r\n                                    end={predictedDataForCntry.length === 0 ? 0 : predictedDataForCntry[predictedDataForCntry.length - 1].xgb_Prediction_vc ? predictedDataForCntry[predictedDataForCntry.length - 1].xgb_Prediction_vc : 0}\r\n                                    separator=','\r\n                                    duration={2.1}  // seconds\r\n                                /> : <Spinner />}\r\n                        </Typography>\r\n\r\n                        <Typography variant='body2' gutterBottom>\r\n                            Predicted Number of vaccinations of COVID-19 {predictedDataForCntry.length === 0 ? '0/0/0' : predictedDataForCntry[predictedDataForCntry.length - 1].Date}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>\r\n                            <i style={{ color: \"rgba(255,0,0.5)\", width: '25px' }} className=\"fas fa-skull-crossbones\"></i>{' '}Deaths\r\n                        </Typography>\r\n\r\n                        <Typography variant='h5' gutterBottom>\r\n                            {countryData && countryData[0]?.total_deaths >= 0 ?\r\n                                <CountUp\r\n                                    start={0}\r\n                                    end={countryData[0].total_deaths ? countryData[0].total_deaths : 0}\r\n                                    separator=','\r\n                                    duration={2.1}  // seconds\r\n                                /> : <Spinner />}\r\n                        </Typography>\r\n\r\n                        <Typography variant='body2' gutterBottom>\r\n                            Number of deaths caused by COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>\r\n                            <i style={{ color: \"rgba(255,0,0.5)\", width: '25px' }} className=\"fas fa-skull-crossbones\"></i>{' '}Predicted Deaths\r\n                        </Typography>\r\n\r\n                        <Typography variant='h5' gutterBottom>\r\n                            {countryData && countryData[0]?.total_deaths >= 0 ?\r\n                                <CountUp\r\n                                    start={0}\r\n                                    end={predictedDataForCntry.length === 0 ? 0 : predictedDataForCntry[predictedDataForCntry.length - 1].xgb_Prediction_Deaths ? predictedDataForCntry[predictedDataForCntry.length - 1].xgb_Prediction_Deaths : 0}\r\n                                    separator=','\r\n                                    duration={2.1}  // seconds\r\n                                /> : <Spinner />}\r\n                        </Typography>\r\n\r\n                        <Typography variant='body2' gutterBottom>\r\n                            Predicted Number of deaths caused by COVID-19 {predictedDataForCntry.length === 0 ? '0/0/0' : predictedDataForCntry[predictedDataForCntry.length - 1].Date}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n            </Grid>\r\n            <Typography color='textSecondary' className={styles.lastupdate}>\r\n                LastUpdated: {countryData[0]?.last_updated_date && moment(countryData[0].last_updated_date).format(\"DD-MMM-YYYY\")}\r\n            </Typography>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React, { useState, useEffect } from 'react';\r\nimport styles from './Chart.module.css';\r\nimport { Bar, Line } from 'react-chartjs-2';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst Chart = ({ countryData, countryDataByDates, predictedDataForCntry }) => {\r\n    const [isBarChart, setBarChart] = useState(false);\r\n\r\n    const barChart = (\r\n        countryData && countryData[0]?.total_cases >= 0 ?\r\n            <>\r\n                <Bar\r\n                    data={{   // two braces, one for using JS code in JSX and second for object\r\n                        labels: ['Total Infected', `${predictedDataForCntry.length === 0 ? \"No Predicted Infected Data Avaialable\" : `Predicted Infected till ${predictedDataForCntry.length && predictedDataForCntry[predictedDataForCntry.length - 1].Date}`}`],\r\n                        datasets: [{\r\n                            data: [countryData[0].total_cases ? countryData[0].total_cases : 0,\r\n                            predictedDataForCntry.length == 0 ? 0 : predictedDataForCntry[predictedDataForCntry.length - 1].xgb_Prediction_cc ? predictedDataForCntry[predictedDataForCntry.length - 1].xgb_Prediction_cc.toFixed() : 0\r\n                            ],\r\n                            label: 'People',\r\n                            backgroundColor: ['rgba(0,0,255)', 'rgba(0,0,255,0.5)']\r\n                        }]\r\n                    }}\r\n                    options={{\r\n                        legend: { display: false },\r\n                        title: { display: true, text: `Current status of ${countryData[0]?.location ? countryData[0]?.location : 'country'}` }\r\n                    }}\r\n                />\r\n\r\n                <Bar\r\n                    data={{\r\n                        labels: ['Total Vaccinations', `${predictedDataForCntry.length === 0 ? \"No Predicted Vaccinations Data Avaialable\" : `Predicted Vaccinations till ${predictedDataForCntry.length && predictedDataForCntry[predictedDataForCntry.length - 1].Date}`}`],\r\n                        datasets: [{\r\n                            data: [\r\n                                countryData[0]?.total_vaccinations ? countryData[0]?.total_vaccinations : 0,\r\n                                predictedDataForCntry.length == 0 ? 0 : predictedDataForCntry[predictedDataForCntry.length - 1].xgb_Prediction_vc ? predictedDataForCntry[predictedDataForCntry.length - 1].xgb_Prediction_vc.toFixed() : 0],\r\n                            label: 'People',\r\n                            backgroundColor: ['rgba(0,255,0)', 'rgba(0,255,0,0.5)']\r\n                        }]\r\n                    }}\r\n                    options={{\r\n                        legend: { display: false },\r\n                        title: { display: true, text: `Current status of ${countryData[0]?.location ? countryData[0]?.location : 'country'}` }\r\n                    }}\r\n                />\r\n\r\n                <Bar\r\n                    data={{\r\n                        labels: ['Deaths', `${predictedDataForCntry.length === 0 ? \"No Predicted Deaths Data Avaialable\" : `Predicted Deaths till ${predictedDataForCntry.length && predictedDataForCntry[predictedDataForCntry.length - 1].Date}`}`],\r\n                        datasets: [{\r\n                            data: [\r\n                                countryData[0]?.total_deaths ? countryData[0]?.total_deaths : 0,\r\n                                predictedDataForCntry.length == 0 ? 0 : predictedDataForCntry[predictedDataForCntry.length - 1].xgb_Prediction_Deaths ? predictedDataForCntry[predictedDataForCntry.length - 1].xgb_Prediction_Deaths.toFixed() : 0\r\n                            ],\r\n                            label: 'People',\r\n                            backgroundColor: ['rgba(255,0,0)', 'rgba(255,0,0,0.5)']\r\n                        }]\r\n                    }}\r\n                    options={{\r\n                        legend: { display: false },\r\n                        title: { display: true, text: `Current status of ${countryData[0]?.location ? countryData[0]?.location : 'country'}` }\r\n                    }}\r\n                /></> : null\r\n\r\n    )\r\n\r\n    const lineChart = (\r\n        countryDataByDates && countryDataByDates.length >= 0 ?\r\n            <>\r\n                <div className={styles.row}>\r\n                    <Line\r\n                        data={{    // two braces, one for using JS code in JSX and second for object \r\n                            labels: countryDataByDates.map((data, i) => data.date),\r\n                            datasets: [{\r\n                                data: countryDataByDates.map((data) => data?.total_cases),\r\n                                label: 'Total Infected',\r\n                                borderColor: 'rgba(0,0,255)',\r\n                                fill: true\r\n                            }\r\n                            ]\r\n                        }}\r\n                        options={{\r\n                            legend: { display: true },\r\n                            title: { display: true, text: `Current status of ${countryData[0]?.location ? countryData[0]?.location : 'country'}` }\r\n                        }}\r\n                    />\r\n\r\n\r\n\r\n                    {predictedDataForCntry.length ? <Line\r\n                        data={{\r\n                            labels: [...countryDataByDates, ...predictedDataForCntry].map((data, i) => data.date || data.Date),\r\n                            datasets: [{\r\n                                data: [...countryDataByDates, ...predictedDataForCntry].map((data) => data?.total_cases || data?.xgb_Prediction_cc),\r\n                                label: 'Predicted Infected',\r\n                                borderColor: 'rgba(0,0,255)',\r\n                                fill: true\r\n                            }\r\n                            ]\r\n                        }}\r\n                        options={{\r\n                            legend: { display: true },\r\n                            title: { display: true, text: `Predicted status of ${countryData[0]?.location ? countryData[0]?.location : 'country'}` }\r\n                        }}\r\n                    /> :\r\n                        <span className={styles.msg}> No Predicted Infected Data Available </span>}\r\n\r\n                </div>\r\n                <div className={styles.marginBottom} />\r\n\r\n                <div className={styles.row}>\r\n                    <Line\r\n                        data={{    // two braces, one for using JS code in JSX and second for object \r\n                            labels: countryDataByDates.map((data, i) => data.date),\r\n                            datasets: [{\r\n                                data: countryDataByDates.map((data) => data?.total_vaccinations),\r\n                                label: 'Total Vaccinations',\r\n                                borderColor: 'rgba(0,255,0)',\r\n                                fill: true\r\n                            }\r\n                            ]\r\n                        }}\r\n                    />\r\n\r\n                    {predictedDataForCntry.length ? <Line\r\n                        data={{    // two braces, one for using JS code in JSX and second for object \r\n                            labels: [...countryDataByDates, ...predictedDataForCntry].map((data, i) => data.date || data.Date),\r\n                            datasets: [{\r\n                                data: [...countryDataByDates, ...predictedDataForCntry].map((data) => data?.total_vaccinations || data?.xgb_Prediction_vc),\r\n                                label: 'Predicted Total Vaccinations',\r\n                                borderColor: 'rgba(0,255,0)',\r\n                                fill: true\r\n                            }\r\n                            ]\r\n                        }}\r\n                    /> :\r\n                        <span className={styles.msg}> No Predicted Vaccinations Data Available </span>}\r\n\r\n                </div>\r\n                <div className={styles.marginBottom} />\r\n\r\n                <div className={styles.row}>\r\n                    <Line\r\n                        data={{    // two braces, one for using JS code in JSX and second for object \r\n                            labels: countryDataByDates.map((data, i) => data.date),\r\n                            datasets: [{\r\n                                data: countryDataByDates.map((data) => data?.total_deaths),\r\n                                label: 'Deaths',\r\n                                borderColor: 'rgba(255,0,0)',\r\n                                fill: true\r\n                            }\r\n                            ]\r\n                        }}\r\n\r\n                    />\r\n\r\n                    {predictedDataForCntry.length ? <Line\r\n                        data={{\r\n                            labels: [...countryDataByDates, ...predictedDataForCntry].map((data, i) => data.date || data.Date),\r\n                            datasets: [{\r\n                                data: [...countryDataByDates, ...predictedDataForCntry].map((data) => data?.total_deaths || data?.xgb_Prediction_Deaths),\r\n                                label: 'Deaths',\r\n                                borderColor: 'rgba(255,0,0)',\r\n                                fill: true\r\n                            }\r\n                            ]\r\n                        }}\r\n\r\n                    /> :\r\n                        <span className={styles.msg}> No Predicted Deaths Data Available </span>}\r\n                </div>\r\n            </> : <i className=\"fas fa-spinner fa-spin fa-fw fa-5x\"></i>\r\n\r\n    );\r\n\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Button variant=\"outlined\"\r\n                className={styles.btn}\r\n                onClick={() => setBarChart(!isBarChart)}\r\n            >\r\n                {isBarChart ? 'Line' : 'Bar'} graph\r\n            </Button>\r\n\r\n            {isBarChart ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst CountryPicker = ({ countriesData, handleCountryChange }) => {\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue='' onChange={(event) => handleCountryChange(event.target.value)} >\r\n                <option value=\"World\">Global</option>\r\n                {countriesData.length} ? {countriesData.map((country, index) => <option value={country[0].location} key={index}>{country[0].location}</option>)} : null\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import axios from 'axios';\r\n\r\nconst baseURL = \"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/latest/owid-covid-latest.json\"\r\n\r\nexport const fetchData = async () => {\r\n\r\n    try {\r\n        const { data } = await axios.get(baseURL);   // destructuring data field only from response\r\n\r\n        // converting data in array of objects\r\n        const covidData = [];\r\n        for (let key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                covidData.push([data[key]])\r\n            }\r\n        }\r\n\r\n        return covidData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDataByDates = async () => {\r\n\r\n    try {\r\n        const { data } = await axios.get('https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.json');   // destructuring data field only from response\r\n\r\n        const covidDataByDates = [];\r\n        for (let key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                covidDataByDates.push([data[key]])\r\n            }\r\n        }\r\n\r\n        return covidDataByDates;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchPredictedData = async (cntryName) => {\r\n    try {\r\n        const article = { country: cntryName };\r\n        const { data } = await axios.post('/app', article)\r\n        console.log(data)\r\n        return data;\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n","export const MAP_TYPES = {\r\n  COUNTRY: 'country',\r\n  STATE: 'state',\r\n};\r\n\r\nexport const MAPS_DIR = '/maps';\r\n\r\nexport const MAP_META = {\r\n  World:{\r\n    name: 'World',\r\n    geoDataFile: `${MAPS_DIR}/world.json`,\r\n  }\r\n}","import React, { memo } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography\r\n} from \"react-simple-maps\";\r\n\r\nimport { MAP_META } from '../../constants';\r\n\r\nconst MapChart = ({ setTooltipVisibility, handleCountryChange }) => {\r\n\r\n  let geoUrl = MAP_META.World.geoDataFile;\r\n\r\n  return (\r\n    <>\r\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\r\n        <ZoomableGroup zoom={1}>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map(geo => (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  onMouseEnter={() => {\r\n                    const { NAME, ISO_A2 } = geo.properties;\r\n                    setTooltipVisibility(true);\r\n                    handleCountryChange(NAME, ISO_A2.toLowerCase());\r\n\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipVisibility(false);\r\n                    // handleCountryChange('');\r\n                  }}\r\n                  style={{\r\n                    default: {\r\n                      fill: \"#a7f1a7\",//rgb(19, 21, 22)\",\r\n                      outline: \"none\",\r\n                      stroke: \"black\",//\"rgb(107, 109, 112)\",\r\n                      strokeOpacity: \"1\"\r\n                    },\r\n                    hover: {\r\n                      fill: \"#189a18\",//\"#F53\",\r\n                      outline: \"none\"\r\n                    },\r\n                    pressed: {\r\n                      fill: \"#E42\",\r\n                      outline: \"none\"\r\n                    }\r\n                  }}\r\n                />\r\n              ))\r\n            }\r\n          </Geographies>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React, { useState } from \"react\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nimport styles from \"./Map.module.css\";\r\nimport MapChart from \"./MapChart\";\r\n\r\nconst Map = ({ _globalData }) => {\r\n  const [countryData, setCountryData] = useState([]);\r\n  const [countryDataForMap, setCountryDataForMap] = useState({\r\n    countryIsoCode: null,\r\n    countryName: null,\r\n    cntryDataNotAvailable: false\r\n  })\r\n  const [showToolTip, setshowToolTip] = useState(false);\r\n\r\n  let globalData = _globalData;\r\n\r\n  const handleCountryChange = async (countryName, countryCode) => {\r\n\r\n    setCountryDataForMap({\r\n      countryName: null,\r\n      countryIsoCode: null,\r\n      cntryDataNotAvailable: false\r\n    })\r\n\r\n    const countryData = globalData.filter(country => country[0].location === countryName)\r\n\r\n    if (countryData.length) {\r\n      setCountryData(countryData[0])\r\n\r\n      setCountryDataForMap({\r\n        countryName: countryName,\r\n        countryIsoCode: countryCode,\r\n        cntryDataNotAvailable: false\r\n      })\r\n\r\n    } else {\r\n      setCountryDataForMap({\r\n        countryName: countryName,\r\n        countryIsoCode: countryCode,\r\n        cntryDataNotAvailable: true\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={styles.mapcontainer}>\r\n      <MapChart\r\n        countryData={countryData}\r\n        handleCountryChange={handleCountryChange}\r\n        setTooltipVisibility={setshowToolTip}\r\n      />\r\n\r\n      {showToolTip && <ReactTooltip>\r\n        {countryData && countryData[0] && (\r\n          <div className={styles.tooltipcontainer}>\r\n            <div className={styles.image}>\r\n              <img\r\n                src={`https://flagcdn.com/w40/${countryDataForMap.countryIsoCode}.png`}\r\n                alt={countryDataForMap.countryName || countryData[0].location}\r\n              />\r\n              <h2>{countryDataForMap.countryName || countryData[0].location}</h2>\r\n            </div>\r\n            {countryDataForMap.cntryDataNotAvailable ? (<span>\r\n              <i style={{ color: \"rgba(255,0,0.5)\", width: '25px' }} className=\"fas fa-window-close\"></i>\r\n              <strong>Data Not Available</strong>\r\n            </span>) : countryData && countryData[0] && (<> <span>\r\n              <i style={{ color: \"rgba(0,0,255,0.5)\", width: '25px' }} className=\"fas fa-clinic-medical\"></i>\r\n              <strong>Total Cases: </strong>\r\n              {new Intl.NumberFormat('en-IN').format(countryData[0]?.total_cases ? countryData[0].total_cases : 0)}\r\n            </span>\r\n              <span>\r\n                <i style={{ color: \"rgba(0,255,0,0.5)\", width: '25px' }} className=\"fas fa-hospital-user\"></i>\r\n                <strong>Total Vaccinations: </strong>\r\n                {new Intl.NumberFormat('en-IN').format(countryData[0]?.total_vaccinations ? countryData[0].total_vaccinations : 0)}\r\n              </span>\r\n              <span>\r\n                <i style={{ color: \"rgba(255,0,0.5)\", width: '25px' }} className=\"fas fa-skull-crossbones\"></i>\r\n                <strong>Total Deaths: </strong>\r\n                {new Intl.NumberFormat('en-IN').format(countryData[0]?.total_deaths ? countryData[0].total_deaths : 0)}\r\n              </span>\r\n              <span>\r\n                <i style={{ color: \"rgba(239,255,0,0.5)\", width: '25px' }} className=\"fas fa-procedures\"></i>\r\n                <strong>New Active: </strong>\r\n                {new Intl.NumberFormat('en-IN').format(countryData[0]?.new_cases ? countryData[0].new_cases : 0)}\r\n              </span> </>)}\r\n          </div>\r\n        )}\r\n      </ReactTooltip>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","import * as React from 'react';\r\nimport { styled, useTheme } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport MuiAppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { SubjectOutlined } from '@material-ui/icons';\r\nimport MapIcon from '@material-ui/icons/Map';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyle = makeStyles((theme) => {\r\n    return {\r\n        drawer: {\r\n            width: drawerWidth,\r\n            [`${theme.breakpoints.up('md')} and (orientation: portrait)`]: {\r\n                width: 0\r\n            },\r\n        },\r\n        drawerPaper: {\r\n            width: drawerWidth\r\n        },\r\n        active: {\r\n            background: '#f4f4f4'\r\n        },\r\n        toolbardummy: theme.mixins.toolbar,    // here asssigned mui toolbar to dummy toolbar to match height of both so our cards wont overlap\r\n        description: {\r\n            flexGrow: 1\r\n        }\r\n    }\r\n});\r\n\r\nconst Main = styled('main', { shouldForwardProp: (prop) => prop !== 'open' })(\r\n    ({ theme, open }) => ({\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: `-${drawerWidth}px`,\r\n        ...(open && {\r\n            transition: theme.transitions.create('margin', {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n            marginLeft: 0,\r\n        }),\r\n    }),\r\n);\r\n\r\nconst AppBar = styled(MuiAppBar, {\r\n    shouldForwardProp: (prop) => prop !== 'open',\r\n})(({ theme, open }) => ({\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    ...(open && {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: `${drawerWidth}px`,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    }),\r\n}));\r\n\r\nconst DrawerHeader = styled('div')(({ theme }) => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n}));\r\n\r\nconst menuItems = [\r\n    {\r\n        text: \"Home\",\r\n        icon: <SubjectOutlined color='secondary' />,\r\n        path: '/'\r\n    },\r\n    {\r\n        text: \"See on Map\",\r\n        icon: <MapIcon color='secondary' />,\r\n        path: '/map'\r\n    }\r\n]\r\n\r\nfunction AppBarWithSideBar() {\r\n    const classes = useStyle();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleMenuOptionClick = (path) => {\r\n        setOpen(false);\r\n        history.push(path);\r\n    }\r\n\r\n    return (\r\n        <Box style={{ display: 'flex' }}>\r\n            <CssBaseline />\r\n            <AppBar\r\n                position=\"fixed\"\r\n                open={open}\r\n                color='secondary'\r\n                className={classes.appbar}\r\n                elevation={0}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        edge=\"start\"\r\n                        style={{ mr: 2, ...(open && { display: 'none' }) }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography\r\n                        variant='h5'\r\n                        className={classes.description}\r\n                        noWrap\r\n                    >\r\n                        COVID-19 Dashboard\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                style={{\r\n                    width: drawerWidth,\r\n                    flexShrink: 0,\r\n                    '& .MuiDrawer-paper': {\r\n                        width: drawerWidth,\r\n                        boxSizing: 'border-box',\r\n                    },\r\n                }}\r\n                variant=\"persistent\"\r\n                anchor=\"left\"\r\n                open={open}\r\n                className={`${classes.drawer} sidedraw`}\r\n                classes={{ paper: classes.drawerPaper }}\r\n            >\r\n                <DrawerHeader>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n                    </IconButton>\r\n                </DrawerHeader>\r\n\r\n                <Divider />\r\n\r\n                <List>\r\n                    {menuItems.map((item) => (\r\n                        <ListItem\r\n                            key={item.text}\r\n                            button\r\n                            onClick={() => handleMenuOptionClick(item.path)}\r\n                            className={location.pathname === item.path ? classes.active : null}\r\n                        >\r\n                            <ListItemIcon>{item.icon}</ListItemIcon>\r\n                            <ListItemText primary={item.text}></ListItemText>\r\n                            <Divider />\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n\r\n            </Drawer>\r\n            <Main open={open}>\r\n                <DrawerHeader />\r\n            </Main>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default AppBarWithSideBar;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport AppBarWithSideBar from './AppBarWithSideBar';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst useStyle = makeStyles((theme) => {\r\n    return {\r\n        page: {\r\n            backgroundColor: \"#f9f9f9\",\r\n            width: '100%',\r\n            padding: theme.spacing(3)\r\n        },\r\n        root: {\r\n            display: 'flex'\r\n        },\r\n        toolbardummy: theme.mixins.toolbar    // here asssigned mui toolbar to dummy toolbar to match height of both so our cards wont overlap\r\n    }\r\n});\r\n\r\n\r\n\r\nfunction Layout({ children }) {\r\n\r\n    const classes = useStyle();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <AppBarWithSideBar />\r\n\r\n            <div className={classes.page}>\r\n                <div className={classes.toolbardummy}></div>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(Layout)\r\n","import React, { Fragment } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport styles from './App.module.css';\r\nimport Cards from './components/Cards/Cards';\r\nimport Chart from './components/Chart/Chart';\r\nimport CountryPicker from './components/CountryPicker/CountryPicker';\r\nimport { fetchData, fetchDataByDates, fetchPredictedData } from './api/index';\r\nimport Map from './components/Map/Map';\r\nimport Layout from './components/Layout';\r\nimport { createTheme } from '@material-ui/core/styles'\r\nimport { ThemeProvider } from '@material-ui/core'\r\nimport moment from 'moment';\r\n\r\nconst theme = createTheme({    // it will override default setting of mui\r\n  palette: {\r\n    primary: {\r\n      main: '#fefefe'       // here it changing primary clor of mui\r\n    }\r\n  }\r\n})\r\nclass App extends React.Component {\r\n  state = {\r\n    globalData: [],\r\n    countryData: [],\r\n    covidGlobalDataByDates: [],\r\n    countryDataByDates: [],\r\n    predictedDataForCntry: []\r\n  }\r\n\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();  // api is giving data in object\r\n    this.setState({ globalData: fetchedData });\r\n\r\n    const countryData = this.state.globalData.filter(country => country[0].location === 'World')\r\n    this.setState({ countryData: countryData[0] });\r\n\r\n    const globaldataByDates = await fetchDataByDates();\r\n    this.setState({ covidGlobalDataByDates: globaldataByDates });\r\n\r\n    const countryDataByDates = this.state.covidGlobalDataByDates.filter(country => country[0].location === 'World')\r\n    this.findPredictedDataForCntry(countryDataByDates)\r\n  }\r\n\r\n  handleCountryChange = async (countryName) => {\r\n\r\n    const countryData = this.state.globalData.filter(country => country[0].location === countryName)\r\n\r\n    const countryDataByDates = this.state.covidGlobalDataByDates.filter(country => country[0].location === countryName);\r\n\r\n\r\n\r\n    if (countryData.length) {\r\n      this.setState({\r\n        countryData: countryData[0],\r\n        predictedDataForCntry: []\r\n      })\r\n\r\n      if (countryDataByDates.length) {\r\n        this.findPredictedDataForCntry(countryDataByDates)\r\n      }\r\n    } else {\r\n      this.setState({\r\n        countryDataByDates: [],\r\n        predictedDataForCntry: []\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  findPredictedDataForCntry = async (countryDataByDates) => {\r\n    const predictedData = await fetchPredictedData(countryDataByDates[0][0]['location']);\r\n    console.log(predictedData)\r\n\r\n    if (predictedData) {\r\n      this.setState({\r\n        countryDataByDates: countryDataByDates[0][0]['data'],\r\n        predictedDataForCntry: predictedData\r\n      })\r\n    } else {\r\n      this.setState({\r\n        countryDataByDates: countryDataByDates[0][0]['data'],\r\n        predictedDataForCntry: []\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <ThemeProvider theme={theme}>\r\n          <Router>\r\n            <Layout>             {/* Layout comp is not part of mui, i have created that to apply common stylings for all pages*/}\r\n              <Switch>\r\n                <Route path=\"/\" exact>\r\n                  <div className={styles.container}>\r\n                    <Cards\r\n                      countryData={this.state.countryData}\r\n                      predictedDataForCntry={this.state.predictedDataForCntry}\r\n                    />\r\n                    <CountryPicker countriesData={this.state.globalData} handleCountryChange={this.handleCountryChange} />\r\n\r\n                    <Chart\r\n                      countryData={this.state.countryData}\r\n                      countryDataByDates={this.state.countryDataByDates}\r\n                      predictedDataForCntry={this.state.predictedDataForCntry}\r\n                    />\r\n                  </div>\r\n                </Route>\r\n                <Route path=\"/map\">\r\n                  <Map\r\n                    _globalData={this.state.globalData}\r\n                  />\r\n                </Route>\r\n              </Switch>\r\n            </Layout>\r\n          </Router>\r\n        </ThemeProvider>\r\n      </Fragment>\r\n    )\r\n  };\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mapcontainer\":\"Map_mapcontainer__3hPFh\",\"tooltipcontainer\":\"Map_tooltipcontainer__3g8rN\",\"image\":\"Map_image__25wmw\",\"label\":\"Map_label__1Ke3b\"};"],"sourceRoot":""}